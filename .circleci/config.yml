version: 2.1

jobs:
  build:
    docker:
      - image: cimg/node:18.12.0
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            make install
      - run:
          name: run lint
          command: |
            make lint
  push-docker:
    docker:
      - image: cimg/node:18.12.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Build image
          command: |
            export DOCKER_PATH=$D_USER
            export DOCKER_PASS=$D_PWD
            # Build image and add a descriptive tag
            docker build --tag=capstone-${CIRCLE_WORKFLOW_ID:0:7} .

            # Get list of docker image
            docker image ls
      - run:
          name: login and push image to docker
          command: |
            # cd Docker
            export DOCKER_PATH=$D_USER
            export DOCKER_PASS=$D_PWD

            docker login -u ${DOCKER_PATH} -p ${DOCKER_PASS}

            # Create tag
            docker tag capstone-${CIRCLE_WORKFLOW_ID:0:7} veeravee93/capstone-${CIRCLE_WORKFLOW_ID:0:7}

            # Push image to a docker repository
            docker push veeravee93/capstone-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Test docker image
          command: |      
            #sudo docker run -it
            docker run -it -p 80:80 capstone-${CIRCLE_WORKFLOW_ID:0:7}
            
            curl localhost:80/index.html
  deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: |
            yum -y update
            echo "----------install tar and gzip----------"
            yum install -y tar gzip
            tar --version
      - attach_workspace:
          at: ~/
      - run:
          name: Install kubectl
          command: |
            echo "Download kubectl"
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            echo "Install kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            echo "Check version of the installed kubectl"
            kubectl version --client
      - run:
          name: Install eksctl
          command: |
            echo "Download, extract and install eksctl"
            curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
            echo "move eksctl to the bin folder"
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: Create eks cluster
          command: |
            echo "----------Create cluster----------"
            eksctl create cluster --name "eksctl-capstone-${CIRCLE_WORKFLOW_ID:0:7}" --region=us-east-1

            echo "----------Check the health of clusters nodes----------"
            kubectl get nodes

            echo "----------Deploy an App from Dockerhub to the Kubernetes Cluster----------"
            kubectl create deploy eksctl-capstone --image=veeravee93/capstone-${CIRCLE_WORKFLOW_ID:0:7}

            echo "----------Waiting until cluster is deployed successfully----------"
            kubectl wait deployment eksctl-capstone --timeout=120s --for condition=Available=True

            echo "----------See the status----------"
            kubectl get deploy,rs,svc,pods

            # echo "----------Get the pods name----------"
            # export POD_NAME=$(kubectl get pods eksctl-capstone -o jsonpath='{.items[*].metadata.name}')

            # echo "----------Port forward----------"
            # kubectl port-forward ${POD_NAME} --address 0.0.0.0 5000:5000
            
            echo ""----------Expose a Kubernetes deployment as a service with a load balancer----------""
            kubectl expose deployment eksctl-capstone --port=8080 --target-port=80 --name=eksctl-espeon --type=LoadBalancer
            echo "----------See status----------"
            kubectl get deploy,rs,svc,pods
workflows:
  default:
    jobs:
      - build
      - push-docker:
          requires: [build]
      - deploy:
          requires: [push-docker]